{"version":3,"sources":["logo.svg","components/Score.js","components/Header.js","components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Score","props","react_default","a","createElement","className","total","status","Header","children","Cards","alt","name","src","image","id","onClick","shuffleScoreCard","App","state","svg","clickedSvgIds","score","goal","_this","includes","setState","push","length","i","j","Math","floor","random","_ref","_this2","this","components_Score","components_Header","map","svgs","components_Cards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mnDAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wKCUzBC,eAPD,SAAAC,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,cAAkCJ,EAAMK,OACxCJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUJ,EAAMM,WCDnBC,EAFA,SAAAP,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMQ,WCWzCC,EAZD,SAAAT,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OACEO,IAAKV,EAAMW,KACXC,IAAKZ,EAAMa,MACXC,GAAId,EAAMc,GACVC,QAAS,kBAAMf,EAAMgB,iBAAiBhB,EAAMc,KAC5CV,UAAU,0BC4DDa,6MA5DbC,MAAQ,CACNC,MACAC,cAAe,GACfC,MAAO,EACPC,KAAM,GACNhB,OAAQ,MAGVU,iBAAmB,SAAAF,GACjB,IAAIM,EAAgBG,EAAKL,MAAME,cAE/B,GAAIA,EAAcI,SAASV,GACzBS,EAAKE,SAAS,CACZL,cAAe,GACfC,MAAO,EACPf,OAAQ,+BAMV,GAFAc,EAAcM,KAAKZ,GAEU,KAAzBM,EAAcO,OAAlB,CAIAJ,EAAKE,SAAS,CAACN,MAAKC,gBAAeC,MAAOD,EAAcO,OAAQrB,OAAQ,MAExE,IAAK,IAAIsB,EAAIT,EAAIQ,OAAS,EAAGC,EAAI,EAAGA,IAAK,CACvC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADDK,EAEpB,CAACd,EAAIU,GAAIV,EAAIS,IAA/BT,EAAIS,GAFkCK,EAAA,GAE9Bd,EAAIU,GAF0BI,EAAA,SALvCV,EAAKE,SAAS,CAAEJ,MAAO,GAAIf,OAAQ,sFAYhC,IAAA4B,EAAAC,KACP,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,8CAEFF,EAAAC,EAAAC,cAACiC,EAAD,CAAO/B,MAAO8B,KAAKjB,MAAMG,MAAOC,KAAM,GAAIhB,OAAQ6B,KAAKjB,MAAMZ,SAC7DL,EAAAC,EAAAC,cAACkC,EAAD,KACGF,KAAKjB,MAAMC,IAAImB,IAAI,SAAAC,GAAI,OACtBtC,EAAAC,EAAAC,cAACqC,EAAD,CACExB,iBAAkBkB,EAAKlB,iBACvBF,GAAIyB,EAAKzB,GACT2B,IAAKF,EAAKzB,GACVD,MAAO0B,EAAK1B,WAIlBZ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,mDAtDQuC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.32ce236c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\n//stateless component\nconst Score = props => (\n  <div className=\"gameScore\">\n    <h3 className=\"score\">Your Score {props.total}</h3>\n    <h3 className=\"status\">{props.status}</h3>\n  </div>\n);\n\nexport default Score;","import React from \"react\";\n\n//stateless component\nconst Header = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Header;","import React from \"react\";\n\nconst Cards = props => (\n  <div className=\"card img-container\">\n    <img\n      alt={props.name}\n      src={props.image}\n      id={props.id}\n      onClick={() => props.shuffleScoreCard(props.id)}\n      className=\"shuffleScore\"\n    />\n  </div>\n);\n\nexport default Cards;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Score from \"./components/Score\";\nimport Header from \"./components/Header\";\nimport Cards from \"./components/Cards\";\nimport svg from \"./cards.json\";\n\nclass App extends Component {\n  state = {\n    svg,\n    clickedSvgIds: [],\n    score: 0,\n    goal: 12,\n    status: \"\"\n  };\n\n  shuffleScoreCard = id => {\n    let clickedSvgIds = this.state.clickedSvgIds;\n\n    if (clickedSvgIds.includes(id)) {\n      this.setState({\n        clickedSvgIds: [],\n        score: 0,\n        status: \"Game Over! PlayAgain?\"\n      });\n      return;\n    } else {\n      clickedSvgIds.push(id);\n\n      if (clickedSvgIds.length === 12) {\n        this.setState({ score: 12, status: \"You Won!\" });\n        return;\n      }\n      this.setState({svg, clickedSvgIds, score: clickedSvgIds.length, status: \" \"});\n\n      for (let i = svg.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [svg[i], svg[j]] = [svg[j], svg[i]];\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Clicky Game</h1>\n          <p>Try not to click the same image!</p>\n        </header>\n        <Score total={this.state.score} goal={12} status={this.state.status} />\n        <Header>\n          {this.state.svg.map(svgs => (\n            <Cards\n              shuffleScoreCard={this.shuffleScoreCard}\n              id={svgs.id}\n              key={svgs.id}\n              image={svgs.image}\n            />\n          ))}\n        </Header>\n        <footer className=\"footer\">\n          <p>clicky game by denis plaster!</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}